package ArrayExercisesTests;

import ArrayExercises.SudokuValidator;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class SudokuValidatorTest {

    @Test
    public void validateSudoku_validSudoku(){
        char[][] grid =  new char[][]{
                {'.','.','.','1','4','.','.','2','.'},
                {'.','.','6','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','1','.','.','.','.','.','.'},
                {'.','6','7','.','.','.','.','.','9'},
                {'.','.','.','.','.','.','8','1','.'},
                {'.','3','.','.','.','.','.','.','6'},
                {'.','.','.','.','.','7','.','.','.'},
                {'.','.','.','5','.','.','.','7','.'}};

        assertValidateSudoku(grid, true);
    }

    @Test
    public void validateSudoku_invalidSudokuColumnsAndRowsRepeatedValues(){
        char[][] grid =  new char[][]{
                {'.','.','.','.','2','.','.','9','.'},
                {'.','.','.','.','6','.','.','.','.'},
                {'7','1','.','.','7','5','.','.','.'},
                {'.','7','.','.','.','.','.','.','.'},
                {'.','.','.','.','8','3','.','.','.'},
                {'.','.','8','.','.','7','.','6','.'},
                {'.','.','.','.','.','2','.','.','.'},
                {'.','1','.','2','.','.','.','.','.'},
                {'.','2','.','.','3','.','.','.','.'}};

        assertValidateSudoku(grid, false);
    }

    @Test
    public void validateSudoku_invalidSudokuColumnsRepeatedValues(){
        char[][] grid =  new char[][]{
                {'.','.','4','.','.','.','6','3','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'5','.','.','.','.','.','.','9','.'},
                {'.','.','.','5','6','.','.','.','.'},
                {'4','.','3','.','.','.','.','.','1'},
                {'.','.','.','7','.','.','.','.','.'},
                {'.','.','.','5','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'}};

        assertValidateSudoku(grid, false);
    }

    @Test
    public void validateSudoku_validSudokuEmptyRowsAndColumns(){
        char[][] grid =  new char[][]{
                {'.','.','.','.','.','.','.','.','2'},
                {'.','.','.','.','.','.','6','.','.'},
                {'.','.','1','4','.','.','8','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','3','.','.','.','.'},
                {'5','.','8','6','.','.','.','.','.'},
                {'.','9','.','.','.','.','4','.','.'},
                {'.','.','.','.','5','.','.','.','.'}};

        assertValidateSudoku(grid, true);
    }

    @Test
    public void validateSudoku_invalidSudokuDuplicatedValueInCageConsecutiveRows(){
        char[][] grid =  new char[][]{
                {'.','4','.','.','.','.','.','.','.'},
                {'.','.','4','.','.','.','.','.','.'},
                {'.','.','.','1','.','.','7','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','3','.','.','.','6','.'},
                {'.','.','.','.','.','6','.','9','.'},
                {'.','.','.','.','1','.','.','.','.'},
                {'.','.','.','.','.','.','2','.','.'},
                {'.','.','.','8','.','.','.','.','.'}};

        assertValidateSudoku(grid, false);
    }

    @Test
    public void validateSudoku_invalidSudokuDuplicatedValueInCageNonConsecutiveRows(){
        char[][] grid =  new char[][]{
                {'.','.','5','.','.','.','.','.','.'},
                {'.','.','.','8','.','.','.','3','.'},
                {'.','5','.','.','2','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','9'},
                {'.','.','.','.','.','.','4','.','.'},
                {'.','.','.','.','.','.','.','.','7'},
                {'.','1','.','.','.','.','.','.','.'},
                {'2','4','.','.','.','.','9','.','.'}};

        assertValidateSudoku(grid, false);
    }

    @Test
    public void validateSudoku_validSudokuValueInLastPosition(){
        char[][] grid =  new char[][]{
                {'.','.','.','2','.','.','6','.','.'},
                {'.','.','.','1','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','5','.','1','.','.','8'},
                {'.','3','.','.','.','.','.','.','.'},
                {'.','.','.','9','.','.','.','.','3'},
                {'4','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','3','8','.'},
                {'.','.','.','.','.','.','.','.','4'}};

        assertValidateSudoku(grid, true);
    }

    @Test
    public void validateSudoku_invalidSudokuDuplicatedValueInCageNonConsecutiveColumns(){
        char[][] grid =  new char[][]{
                {'.','.','.','.','.','.','5','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'9','3','.','.','2','.','4','.','.'},
                {'.','.','7','.','.','.','3','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'.','.','.','3','4','.','.','.','.'},
                {'.','.','.','.','.','3','.','.','.'},
                {'.','.','.','.','.','5','2','.','.'}};

        assertValidateSudoku(grid, false);
    }

    @Test
    public void validateSudoku_validSudokuFiledEdges(){
        char[][] grid =  new char[][]{
                {'.','8','7','6','5','4','3','2','1'},
                {'2','.','.','.','.','.','.','.','.'},
                {'3','.','.','.','.','.','.','.','.'},
                {'4','.','.','.','.','.','.','.','.'},
                {'5','.','.','.','.','.','.','.','.'},
                {'6','.','.','.','.','.','.','.','.'},
                {'7','.','.','.','.','.','.','.','.'},
                {'8','.','.','.','.','.','.','.','.'},
                {'9','.','.','.','.','.','.','.','.'}};

        assertValidateSudoku(grid, true);
    }

    private void assertValidateSudoku(char[][] grid, boolean expectedResult) {
        boolean result = SudokuValidator.validateSudoku(grid);
        assertEquals(result, expectedResult);
    }

}
